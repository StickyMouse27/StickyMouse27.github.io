<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>问候语…早上好…？</title>
    <url>//archives/2025-03/geetings/</url>
    <content><![CDATA[<div class="hexo-template constructing"><div class="note warning"><p><strong>“请、、请您稍等！！就、、就快好了！”鱼干抱住，并企图藏住这个页面，说道。</strong></p>
<p><span class="mask"><del>（才不是没写完就发出来了</del></span></p>
<p>此页面正在 <strong>施工中……</strong> ⚠</p>
<p>您可能会看见 <strong>如下内容</strong> 出现在此页面中：</p>
<ul>
<li>一只忘记带安全帽的鱼干（只是是找不到了而已</li>
<li>一些<strong>杂</strong>物被<strong>鱼</strong>干随意堆放（ <del>简称<strong>杂鱼</strong></del> ~</li>
<li>一个“此页面正在 <strong>施工中……</strong> 的标志牌⚠”（虽然鱼干不觉得有谁会看见，但万一呢……</li>
</ul>
</div></div>

<p>一些问候语，也许可以安放在网页的某个角落…？</p>
<ul>
<li>早喵~ 今天也是充满活力的一天呢~ (&#x3D;^･ω･^&#x3D;)</li>
<li>午安~ 想干点什么嘛~ (,,&gt;ω&lt;,,)</li>
<li>晚上好~ 累了嘛？鱼干会一直在你身边哦ฅ^⩊^ฅ</li>
<li>夜深了~ <del>想要来鱼干的被窝玩嘛</del> ~ (⁄ ⁄•⁄ω⁄•⁄ ⁄)</li>
<li>早点睡哦~ 熬夜对健康不好（比叉）</li>
</ul>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>^_^</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型的自我组织</title>
    <url>//archives/2025-06/ai-company/</url>
    <content><![CDATA[<div class="hexo-template constructing"><div class="note warning"><p><strong>“请、、请您稍等！！就、、就快好了！”鱼干抱住，并企图藏住这个页面，说道。</strong></p>
<p><span class="mask"><del>（才不是没写完就发出来了</del></span></p>
<p>此页面正在 <strong>施工中……</strong> ⚠</p>
<p>您可能会看见 <strong>如下内容</strong> 出现在此页面中：</p>
<ul>
<li>一只忘记带安全帽的鱼干（只是是找不到了而已</li>
<li>一些<strong>杂</strong>物被<strong>鱼</strong>干随意堆放（ <del>简称<strong>杂鱼</strong></del> ~</li>
<li>一个“此页面正在 <strong>施工中……</strong> 的标志牌⚠”（虽然鱼干不觉得有谁会看见，但万一呢……</li>
</ul>
</div></div>

<p>这是我最近花了一天和一个晚上摸的项目。主要是为了复习<span class="mask">（才不是因为忘记了）</span>一下相关接口的用法。</p>
<p>源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N0aWNreU1vdXNlMjcveW91X2tub3dfaXRfaXNfYWk=">github<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="ai公司"><a href="#ai公司" class="headerlink" title="ai公司"></a>ai公司</h2><p>当我们需要解决复杂问题的时候，可能会发现ai的脑子不够用。</p>
<p><img data-src="/../images/post_images/ai-simple-structure.svg" alt="ai简单运行结构"></p>
<p>于是，我们可以将多个ai组织成一个公司，让他们协作完成任务。</p>
<p>以下是我们的ai公司的组织架构图：</p>
<p><img data-src="/../images/post_images/ai-company-structure.svg" alt="ai公司组织结构图"></p>
<p>等等，好像太复杂了！</p>
<p>让我们进行一些优化：</p>
<p><img data-src="/../images/post_images/ai-company-structure-start.svg" alt="ai公司组织架构图-初始"></p>
<p>现在看起来好多了。</p>
<p>那些优化掉的人总是需要的（毕竟我们砍掉了所有动脉）。</p>
<p>不过作为一个开始，还是不错的。</p>
<h2 id="让ai把自己组织起来"><a href="#让ai把自己组织起来" class="headerlink" title="让ai把自己组织起来"></a>让ai把自己组织起来</h2><p>HR负责公司的招聘事务。</p>
<p>说是招聘，其实是写promts。</p>
<p>例子：</p>
<ul>
<li><strong>USER -&gt; MANAGER:</strong> 帮我用python写一个hello world。</li>
<li><strong>MANAGER -&gt; HR:</strong> 我司需要一名python开发专家！</li>
<li><strong>HR -&gt; SYSTEM:</strong> “python 工程师”, 0.0, “【一些提示词……】”</li>
<li><strong>HR -&gt; MANAGER:</strong> 我招聘了一名python工程师。</li>
<li><strong>MANAGER -&gt; PYTHON_ENGINEER:</strong> 帮我用python写一个hello world。</li>
<li><strong>PYTHON_ENGINEER -&gt; MANAGER:</strong> 【代码】</li>
<li><strong>MANAGER -&gt; USER:</strong> 这是用python写的hello world：【代码】</li>
</ul>
<p>这样可以让ai专人干专事。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>大语言模型</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客插件，预制模板</title>
    <url>//archives/2025-03/templates-for-hexo/</url>
    <content><![CDATA[<p>一段简单的代码，为hexo增加了一个tag-plugin，实现一些可以复用的模板。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><figcaption><span>template.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;hexo-fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> pathFn = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> template = <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> filename = args.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> path = pathFn.<span class="title function_">join</span>(hexo.<span class="property">source_dir</span>, <span class="string">&quot;templates&quot;</span>, <span class="string">`<span class="subst">$&#123;filename&#125;</span>.md`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">readFile</span>(path).<span class="title function_">then</span>(<span class="function"><span class="params">content</span> =&gt;</span></span><br><span class="line">        hexo.<span class="property">post</span>.<span class="title function_">render</span>(path, &#123; <span class="attr">content</span>: content, <span class="attr">_content</span>: content &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">            <span class="string">`&lt;div class=&quot;hexo-template <span class="subst">$&#123;filename&#125;</span>&quot;&gt;<span class="subst">$&#123;value.content&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;template&#x27;</span>, template, &#123; <span class="attr">async</span>: <span class="literal">true</span> &#125;,);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;tpl&#x27;</span>, template, &#123; <span class="attr">async</span>: <span class="literal">true</span> &#125;,);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><ol>
<li>在.&#x2F;scripts文件夹中创建template.js文档并复制以上内容</li>
<li>在.&#x2F;source文件夹中创建templates文件夹</li>
<li>在新建的文件夹中创建需要的模板，文件需为markdown文件，如<code>foo.md</code></li>
<li>使用<code>&#123;% template &lt;filename&gt; %&#125;</code>或<code>&#123;% tpl &lt;filename&gt; %&#125;</code>插入模板，如<code>&#123;% tpl foo %&#125;</code></li>
</ol>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight md"><figcaption><span>source/templates/constructing.md</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% note warning %&#125;</span><br><span class="line"></span><br><span class="line"><span class="strong">**“请、、请您稍等！！就、、就快好了！”鱼干抱住，并企图藏住这个页面，说道。**</span></span><br><span class="line"></span><br><span class="line">此页面正在 <span class="strong">**施工中……**</span> ⚠</span><br><span class="line"></span><br><span class="line">您可能会看见 <span class="strong">**如下内容**</span> 出现在此页面中：</span><br><span class="line"><span class="bullet">-</span> 一只忘记带安全帽的鱼干（只是是找不到了而已</span><br><span class="line"><span class="bullet">-</span> 一些<span class="strong">**杂**</span>物被<span class="strong">**鱼**</span>干随意堆放（ ~~简称<span class="strong">**杂鱼**</span>~~ ~</span><br><span class="line"><span class="bullet">-</span> 一个“此页面正在 <span class="strong">**施工中……**</span> 的标志牌⚠”（虽然鱼干不觉得有谁会看见，但万一呢……</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight md"><figcaption><span>templates-for-hexo.md</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% tpl constructing %&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<div class="hexo-template constructing"><div class="note warning"><p><strong>“请、、请您稍等！！就、、就快好了！”鱼干抱住，并企图藏住这个页面，说道。</strong></p>
<p><span class="mask"><del>（才不是没写完就发出来了</del></span></p>
<p>此页面正在 <strong>施工中……</strong> ⚠</p>
<p>您可能会看见 <strong>如下内容</strong> 出现在此页面中：</p>
<ul>
<li>一只忘记带安全帽的鱼干（只是是找不到了而已</li>
<li>一些<strong>杂</strong>物被<strong>鱼</strong>干随意堆放（ <del>简称<strong>杂鱼</strong></del> ~</li>
<li>一个“此页面正在 <strong>施工中……</strong> 的标志牌⚠”（虽然鱼干不觉得有谁会看见，但万一呢……</li>
</ul>
</div></div>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有用的c++函数</title>
    <url>//archives/2025-03/useful-cpp-functions/</url>
    <content><![CDATA[<h2 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// @brief 二分答案（闭区间）</span></span><br><span class="line"><span class="comment">/// @tparam T 数字类型</span></span><br><span class="line"><span class="comment">/// @param l 左初始值</span></span><br><span class="line"><span class="comment">/// @param r 右初始值</span></span><br><span class="line"><span class="comment">/// @param check 检查答案在左还是右的函数，若true则向右移动，否则向左移动</span></span><br><span class="line"><span class="comment">/// @param reverseAns 是否反转答案</span></span><br><span class="line"><span class="comment">/// @return 答案</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line">T <span class="built_in">ba</span>(T l, T r, <span class="built_in">bool</span> (*check)(T), <span class="type">bool</span> reverseAns = <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    T m = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &gt;= l)</span><br><span class="line">    &#123;</span><br><span class="line">        m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;l: &quot;&lt;&lt;l&lt;&lt;&quot; r: &quot;&lt;&lt;r&lt;&lt;&quot; m: &quot;&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(m))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = reverseAns ? ans : m;</span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans = reverseAns ? m : ans;</span><br><span class="line">            r = m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// @brief 二分答案（左开右闭，向左寻找）</span></span><br><span class="line"><span class="comment">/// @tparam T 数字类型</span></span><br><span class="line"><span class="comment">/// @param l 左初始值</span></span><br><span class="line"><span class="comment">/// @param r 右初始值</span></span><br><span class="line"><span class="comment">/// @param check 检查答案在左还是右的函数，若true则向右移动，否则向左移动</span></span><br><span class="line"><span class="comment">/// @return 答案</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line">T <span class="built_in">baL</span>(T l, T r, <span class="built_in">bool</span> (*check)(T))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        T m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;l: &quot;&lt;&lt;l&lt;&lt;&quot; r: &quot;&lt;&lt;r&lt;&lt;&quot; m: &quot;&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(m))</span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// @brief 二分答案（左闭右开，向右寻找）</span></span><br><span class="line"><span class="comment">/// @tparam T 数字类型</span></span><br><span class="line"><span class="comment">/// @param l 左初始值</span></span><br><span class="line"><span class="comment">/// @param r 右初始值</span></span><br><span class="line"><span class="comment">/// @param check 检查答案在左还是右的函数，若true则向右移动，否则向左移动</span></span><br><span class="line"><span class="comment">/// @return 答案</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line">T <span class="built_in">baR</span>(T l, T r, <span class="built_in">bool</span> (*check)(T))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        T m = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;l: &quot;&lt;&lt;l&lt;&lt;&quot; r: &quot;&lt;&lt;r&lt;&lt;&quot; m: &quot;&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(m))</span><br><span class="line">            l = m;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = m - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>25年7月 VS Code 终端无法自动进入Python虚拟环境</title>
    <url>//archives/2025-07/vscode-python-virtual-env-does-not-work/</url>
    <content><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>最近，进入VS Code，进入“Python: 选择Python解释器”后，创建或选择.venv虚拟环境，打开终端，运行<code>pip --version</code>，发现此时pip位置处于全局环境下。手动激活虚拟环境，再运行<code>pip --version</code>，此时pip位置正确。</p>
<h2 id="应该是怎样的？"><a href="#应该是怎样的？" class="headerlink" title="应该是怎样的？"></a>应该是怎样的？</h2><p>打开终端时，应该自动进入虚拟环境。</p>
<h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><ol>
<li>下载Python Environments（<code>ms-python.vscode-python-envs</code>）扩展。</li>
<li>在settings.json中添加<code>&quot;python.useEnvironmentsExtension&quot;: true</code></li>
</ol>
<p>参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUtcHl0aG9uL2lzc3Vlcy8yNTI5MQ==">Terminal no longer auto-activating #25291<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p><strong>You may now see that when you open a new terminal, it does not auto-activate the python environment in this terminal.</strong></p>
<p>This issue includes information and resolution to this problem:</p>
<p><strong>We have decided to turn off the experiment “pythonTerminalEnvVarActivation”</strong> on VS Code Insiders. (It is still enabled for users on VS Code stable in the interim) This experiment was created a while back to implement auto-terminal activation, but proved to be buggy and highlighted that this approach is difficult to get right for every user. We are now moving over fully to the Python Environments extension as our long-term solution to all environment related tasks. This new extension will work hand in hand with the Python extension to provide a very much improved experience. Learn more about our roll out of this extension by default to Python users <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUtcHl0aG9uLWVudmlyb25tZW50cy9pc3N1ZXMvNTgx">here<i class="fa fa-external-link-alt"></i></span>.</p>
<p>With this in mind, these are the steps to get back environment auto-activation upon opening a terminal:</p>
<ol>
<li>Install the Python Environments Extension (published by Microsoft): <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW1zLXB5dGhvbi52c2NvZGUtcHl0aG9uLWVudnM=">https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-python-envs<i class="fa fa-external-link-alt"></i></span></li>
<li>Add <code>&quot;python.useEnvironmentsExtension&quot;: true</code>, to your USER settings (there is a chance this setting will show as “unknown” but it works)</li>
<li>Final do either:<br>A. Do nothing which keeps <code>&quot;python-envs.terminal.autoActivationType&quot;</code> to its default value <code>command</code> and the activation command will be run in each terminal on open<br>B. Add <code>&quot;python-envs.terminal.autoActivationType&quot;: &quot;shellStartup&quot;</code> to your settings (user or workspace) which will inject the activation script into your shell script for a more automatic activation. Shell startup is only supported for zsh, fsh, pwsh, bash, and cmd.<br>Thank you everyone for your patience and feedback!</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
